// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/common.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/repository/common.go -destination=./mock/repository/common.go
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"
	entity "template-ulamm-backend-go/pkg/model/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockCommonRepository is a mock of CommonRepository interface.
type MockCommonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommonRepositoryMockRecorder
}

// MockCommonRepositoryMockRecorder is the mock recorder for MockCommonRepository.
type MockCommonRepositoryMockRecorder struct {
	mock *MockCommonRepository
}

// NewMockCommonRepository creates a new mock instance.
func NewMockCommonRepository(ctrl *gomock.Controller) *MockCommonRepository {
	mock := &MockCommonRepository{ctrl: ctrl}
	mock.recorder = &MockCommonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonRepository) EXPECT() *MockCommonRepositoryMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockCommonRepository) Ping(ctx context.Context) (*entity.Ping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(*entity.Ping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCommonRepositoryMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCommonRepository)(nil).Ping), ctx)
}
