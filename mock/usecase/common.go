// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/usecase/common.go
//
// Generated by this command:
//
//	mockgen -source=./pkg/usecase/common.go -destination=./mock/usecase/common.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"
	response "template-ulamm-backend-go/pkg/model/response"

	gomock "go.uber.org/mock/gomock"
)

// MockCommonUsecase is a mock of CommonUsecase interface.
type MockCommonUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCommonUsecaseMockRecorder
}

// MockCommonUsecaseMockRecorder is the mock recorder for MockCommonUsecase.
type MockCommonUsecaseMockRecorder struct {
	mock *MockCommonUsecase
}

// NewMockCommonUsecase creates a new mock instance.
func NewMockCommonUsecase(ctrl *gomock.Controller) *MockCommonUsecase {
	mock := &MockCommonUsecase{ctrl: ctrl}
	mock.recorder = &MockCommonUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonUsecase) EXPECT() *MockCommonUsecaseMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockCommonUsecase) Ping(ctx context.Context) (*response.PingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(*response.PingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockCommonUsecaseMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockCommonUsecase)(nil).Ping), ctx)
}
